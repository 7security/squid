
/*
 * $Id: SqString.cci,v 1.2 2007/05/19 06:49:12 amosjeffries Exp $
 *
 * DEBUG: section 67    String
 * AUTHOR: Duane Wessels
 *
 * SQUID Web Proxy Cache          http://www.squid-cache.org/
 * ----------------------------------------------------------
 *
 *  Squid is the result of efforts by numerous individuals from
 *  the Internet community; see the CONTRIBUTORS file for full
 *  details.   Many organizations have provided support for Squid's
 *  development; see the SPONSORS file for full details.  Squid is
 *  Copyrighted (C) 2001 by the Regents of the University of
 *  California; see the COPYRIGHT file for full details.  Squid
 *  incorporates software developed and/or copyrighted by other
 *  sources; see the CREDITS file for full details.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
 *
 */

SqString::SqString() : size_(0), len_(0), buf_ (NULL)
{
#if DEBUGSTRINGS
    SqStringRegistry::Instance().add(this);
#endif
}

void
SqString::absorb(SqString &old)
{
    clear();
    size_ = old.size_;
    buf_ = old.buf_;
    len_ = old.len_;
    old.size_ = 0;
    old.buf_ = NULL;
    old.len_ = 0;
}

int
SqString::size() const
{
    return len_;
}

char const *
SqString::c_str() const
{
    return buf_;
}

const char *
SqString::pos(char const *aString) const
{
    return strstr(c_str(), aString);
}

const char *
SqString::pos(char const ch) const
{
    return strchr(c_str(), ch);
}

const char *
SqString::rpos(char const ch) const
{
    return strrchr(c_str(), ch);
}

bool
SqString::empty() const
{
    return (buf_ == NULL || len_ == 0);
}

int
SqString::compare(char const *aString) const
{
    /* strcmp fails on NULLS */

    if (size() == 0 && (aString == NULL || aString[0] == '\0'))
        return 0;

    if (size() == 0)
        return -1;

    if (aString == NULL || aString[0] == '\0')
        return 1;

    return strcmp(c_str(), aString);
}

int
SqString::compare(char const *aString, size_t count) const
{
    /* always the same at length 0 */

    if (count == 0)
        return 0;

    if (size() == 0 && (aString == NULL || aString[0] == '\0'))
        return 0;

    if (size() == 0)
        return -1;

    if (aString == NULL || aString[0] == '\0')
        return 1;

    return strncmp(c_str(), aString, count);
}

int
SqString::compare(SqString const &aString) const
{
    /* strcmp fails on NULLS */

    if (size() == 0 && aString.size() == 0)
        return 0;

    if (size() == 0)
        return -1;

    if (aString.size() == 0)
        return 1;

    return strcmp(c_str(), aString.c_str());
}

void
SqString::set (char const *loc, char const ch)
{
    operator[](loc-buf_) = ch;
}

void
SqString::cut (size_t newLength)
{
    operator[](newLength) = '\0';
    len_ = newLength;
}

void
SqString::cutPointer (char const *loc)
{
    operator[](loc-buf_) = '\0';
    len_ = loc-buf_;
}
